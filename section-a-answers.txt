-- FUNCTION: tangio.fn_get_tracked_route()

DROP FUNCTION IF EXISTS tangio.fn_get_tracked_route(CHARACTER, CHARACTER, CHARACTER, DATE);

CREATE OR REPLACE FUNCTION tangio.fn_get_tracked_route(
      _userUuid CHARACTER(36),
      _clientUuid CHARACTER(36),
      _agentUserUuid CHARACTER(36),
      _trackedDate DATE
    )
    RETURNS TABLE(
      user_uuid CHARACTER(36),
      start_point JSON,
      end_point  JSON,
      geo_line JSON,
      centroid JSON,
      activities JSON
    )
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE
    ROWS 1000

     AS $BODY$
      DECLARE _row RECORD;
      DECLARE _isSalesStructureFilterFeatureEnabled BOOLEAN DEFAULT FALSE;
      DECLARE _salesStructureGroups CHARACTER VARYING[];

     BEGIN

	_isSalesStructureFilterFeatureEnabled = fn_is_sales_structure_feature_enabled(_clientUuid);

	IF _isSalesStructureFilterFeatureEnabled = TRUE THEN
		_salesStructureGroups = fn_get_user_sales_structure_filter_array(_userUuid);
	END IF;

	RAISE NOTICE 'SS Filter Enabled: (%)', _isSalesStructureFilterFeatureEnabled;
  RAISE NOTICE 'USING SS Filter: (%)', _salesStructureGroups;

     FOR _row IN(
       SELECT
         u.uuid user_uuid,
         public.ST_MakeLine(tl.geo ORDER BY tl.date_created) AS geo_line,
         COALESCE(
             json_agg(
                 json_build_object(
                     'outlet_uuid',vt.outlet_uuid,
                     'outlet_name',vt.outlet_name,
                     'outlet_location',public.ST_AsGeoJSON(COALESCE(vt.outlet_location)),
                     'outlet_activities_uuid',vt.outlet_activities_uuid
                 )
             )
         FILTER (WHERE vt.outlet_uuid IS NOT NULL) , '{}')::JSON activities

         FROM tracked_location tl
         JOIN "user" u ON u.id = tl.created_by_user_id
         JOIN client c ON c.id = u.client_id
         LEFT OUTER JOIN (
                     SELECT
                       ov.visited_by_user_id user_id,
                       ov.device_id device_id,
                       o.uuid outlet_uuid,
                       o.name outlet_name,
                       ov.date_created::DATE date_created,
                       COALESCE(oa.geo,ov.geo) outlet_location,
                       array_agg(
                           CASE
                              WHEN os.outlet_visit_id IS NOT NULL THEN
                                json_build_object('sale_uuid',os.uuid)
                              WHEN osr.outlet_visit_id IS NOT NULL THEN
                                json_build_object('stock_report_uuid',osr.uuid)
                              WHEN sr.outlet_visit_id IS NOT NULL THEN
                                json_build_object('survey_result_uuid',sr.uuid)
                           END )
                         AS outlet_activities_uuid
                       FROM outlet_visit ov
                       JOIN outlet o ON o.id = ov.outlet_id
                       LEFT OUTER JOIN sales_structure_group ssg ON  ssg.id = ov.sales_structure_group_id
                       LEFT OUTER JOIN outlet_address oa ON o.id = oa.outlet_id
                       LEFT OUTER JOIN outlet_sales os ON ov.id = os.outlet_visit_id
                       LEFT OUTER JOIN outlet_stock_report osr ON ov.id = osr.outlet_visit_id
                       LEFT OUTER JOIN survey_result sr ON ov.id = sr.outlet_visit_id
                       WHERE (
                               _isSalesStructureFilterFeatureEnabled = FALSE
                            OR _salesStructureGroups = '{}'
                            OR  ssg.path LIKE ANY (_salesStructureGroups)
                         ) 
                      GROUP BY ov.visited_by_user_id,o.uuid,o.name,outlet_location,ov.date_created::date,ov.device_id
                   ) AS vt
                           ON  vt.user_id = u.id
                           AND tl.date_created::DATE = vt.date_created
                           AND vt.device_id = tl.device_id

           LEFT OUTER JOIN (
                             SELECT tssg.tracked_location_id, array_to_string(array_agg(ssg.path), ':') ssg_path
                             FROM tracked_location_sales_structure_group tssg, sales_structure_group ssg
                             WHERE ssg.id = tssg.sales_structure_group_id
                             GROUP BY tssg.tracked_location_id
                           ) AS tlssg ON tlssg.tracked_location_id = tl.id
            WHERE tl.status = 0
            AND  c.uuid = _clientUuid
            AND (_agentUserUuid IS NULL OR u.uuid = _agentUserUuid )
            AND (tl.date_created::DATE = _trackedDate OR (
                  _trackedDate IS NULL AND tl.date_created::DATE = DATE(NOW())
                )
              )
            AND (
                  _isSalesStructureFilterFeatureEnabled = FALSE
                 OR _salesStructureGroups = '{}'
                 OR tlssg.ssg_path LIKE ANY (_salesStructureGroups)
                )

      GROUP BY u.uuid, DATE(tl.date_created),tl.device_id
      ORDER BY DATE(tl.date_created)
    )

    LOOP

    user_uuid := _row.user_uuid;
    start_point := public.ST_AsGeoJSON(public.ST_StartPoint(_row.geo_line));
    end_point := public.ST_AsGeoJSON(public.ST_EndPoint(_row.geo_line));
    geo_line := public.ST_AsGeoJSON(_row.geo_line);
    centroid := public.ST_AsGeoJSON(public.ST_Centroid(_row.geo_line));
    activities := _row.activities;

   RETURN NEXT;
   END LOOP;
   END;

$BODY$;

ALTER FUNCTION tangio.fn_get_tracked_route(
      _userUuid CHARACTER(36),
      _clientUuid CHARACTER(36),
      _agentUserUuid CHARACTER(36),
      _trackedDate DATE
) OWNER TO tangio;


/*
SELECT * FROM tangio.fn_get_tracked_route(
				   'eb9c0c93-40ff-4d48-b3cc-088772031948',
				   'bdc19766-a2e0-41ad-9f3d-54223a637470',
				   '6ab89ac8-e482-4985-a785-a44a69c81ecb',
				   '2018-11-19');
*/
